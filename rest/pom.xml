<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>ca.mikegabelmann</groupId>
        <artifactId>demo-rest2</artifactId>
        <version>0.1-SNAPSHOT</version>
    </parent>

    <artifactId>demo-rest2-rest</artifactId>
    <version>0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>Demo - Controller - REST</name>
    <description>
        This module provides the transport layer and access to the services via REST endpoints. It handles security,
        and validation of objects received but only at a high level. All "business" related validation and logic will
        be handled in the service module.

        Unit tests "mock" the service layer.
        Integration tests use the entire stack as you would expect.
    </description>

    <properties>
        <mapstruct.version>1.5.3.Final</mapstruct.version>
    </properties>

    <dependencies>

        <dependency>
            <groupId>ca.mikegabelmann</groupId>
            <artifactId>demo-rest2-persistence</artifactId>
            <version>${project.parent.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>ca.mikegabelmann</groupId>
            <artifactId>demo-rest2-shared</artifactId>
            <version>${project.parent.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- NOTE: enables spring data rest endpoints, so you don't need services, exposes @Entity objects -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-rest</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${mapstruct.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- NOTE: how to exclude spring-boot-starter-logging from all modules
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <version>${spring-boot-starter.version}</version>
            <scope>compile</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        -->

        <!-- NOTE: returns diagnostics, health information, etc. -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
            <version>${spring-boot.version}</version>
            <scope>runtime</scope>
        </dependency>

        <!-- NOTE: used for demonstration purposes, typically this would be a 'real' database. -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- FIXME: need these to get Java 9+ working since module no longer included, find proper lib versions -->
        <dependency>
            <groupId>jakarta.xml.bind</groupId>
            <artifactId>jakarta.xml.bind-api</artifactId>
            <version>4.0.0</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
            <version>4.0.1</version>
            <scope>compile</scope>
        </dependency>


        <!-- TEST -->
        <!-- NOTE: included to gain access to ModelFactory class -->
        <dependency>
            <groupId>ca.mikegabelmann</groupId>
            <artifactId>demo-rest2-persistence</artifactId>
            <version>0.1-SNAPSHOT</version>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <finalName>demo2</finalName>

        <plugins>
            <!-- create springboot uber jar -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
                <configuration>
                    <mainClass>ca.mikegabelmann.demo2.Demo2Application</mainClass>
                    <layout>ZIP</layout>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <!-- integration testing -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <configuration>
                    <!-- NOTE: fix for maven-failsafe-plugin not finding classes from the original jar
                               https://github.com/spring-projects/spring-boot/issues/6254
                    -->
                    <classesDirectory>${project.build.directory}/${project.build.finalName}.jar.original</classesDirectory>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>
